"""
Created on 2017-10-27

An Api to get sequences from FASTA file by gene file 'GFF3' and gene sequences \
file 'FASTA', and a gene names list in 'CSV' format can be used to get particular \
gene names.

Usage:
    blast.sh \
        -BLASTN \
        -i /path/to/gene_names.csv \
        -sp species name \ # the name is the file generated by 'makeGenomeDir.py'
        -db path/to/blastdb/filename_in_blastdb_dir_without_suffix \
        2>&1 | tee logfileName.log

@author: yinghuang
"""
import argparse
import os
import pandas as pd


# my python library
import getGeneSeq as gs


PWD = os.path.split(os.path.realpath(__file__))[0]

def main():
    args = commandline()
    use_BLASTN = args.use_BLASTN
    use_BLASTDB = args.use_BLASTDB
    ifile = args.ifile
    print(ifile)
    ofile = args.ofile
    species = args.species
    blastdb = args.blastdb

    if use_BLASTDB is True:
        use_BLASTN = False
    else:
        use_BLASTDB = False

    print('use_BLASTN: ', use_BLASTN)
    igeneNames = None

    if ifile:
        print('> Reading from:', ifile)
        igeneNames = get_igeneNames(ifile)
        ifilename = os.path.basename(ifile)
        ofilename = '.'.join(ifilename.split('.')[:-1]) + '.fa'
        if not ofile:
            ofile = os.path.join(os.path.dirname(ifile), ofilename)
        print('> Writing to:', ofile)
    else:
        if not ofile:
            print('> Using all genes of {}'.format(species))
            ofilename = species + '.fa'
            ofile = os.path.join(os.getcwd(), ofilename)
            print('> Writing to:', ofile)

    print('igeneNames: ', igeneNames, 'species: ', species, 'ofile: ', ofile)
    get_seq(igeneNames=igeneNames, species=species, ofile=ofile)

    if use_BLASTN is True:
        blastn(ifile=ofile, idb=blastdb)

    if use_BLASTDB is True:
        blastdb_nucl(ifa = ofile)


def commandline():
    msg = """Get gene of GO file and use its sequences running BLASTN."""
    parser = argparse.ArgumentParser(description=msg)
    parser.add_argument('-BLASTN',
                        dest='use_BLASTN',
                        required=False,
                        action='store_true',
                        default=True,
                        help="use BLASTN, if selected, '-BLASTDB' will be False.")
    parser.add_argument('-BLASTDB',
                        dest='use_BLASTDB',
                        required=False,
                        action='store_true',
                        default=False,
                        help="use makeblastdb, if selected, '-BLASTN' will be False.")
    parser.add_argument('-i',
                        dest='ifile',
                        required=False,
                        action='store',
                        help="read in a GO file else using all gene sequences for BLASTN.")
    parser.add_argument('-o',
                        dest='ofile',
                        required=False,
                        action='store',
                        help="path of out put file (*.xml).")
    parser.add_argument('-sp',
                        dest='species',
                        required=True,
                        action='store',
                        help="read in species name as Genome directory name.")
    parser.add_argument('-db',
                        dest='blastdb',
                        required=False,
                        action='store',
                        help="read in BLAST Database for BLASTN.")
    args = parser.parse_args()
    return args


def get_igeneNames(ifile):
    onames = []
    with open(ifile, 'rt') as f:
        while True:
            line = f.readline()
            if not line:
                break
            name = line.strip('\n').split('\t')[0]
            onames.append([name])

    return pd.DataFrame(onames)


def get_seq(igeneNames=None, species=None, ofile=None):
    iGenomePath = os.path.join(PWD, 'Genome', species)
    if igeneNames is None:
        gs.getGeneSeq(iGenomePath=iGenomePath, ofa=ofile)
    else:
        gs.getGeneSeq(iGenomePath=iGenomePath, ofa=ofile, icsv=igeneNames)


def blastn(ifile=None, idb=None):

    if is_software_exist(software='blastn') is True:
        ofile = '.'.join(ifile.split('.')[:-1]) + '.xml'

        cmdLine = \
            'blastn ' + \
            '-query {} '.format(ifile) + \
            '-db {} '.format(idb) + \
            '-max_target_seqs 10 ' + \
            '-out {} '.format(ofile) + \
            '-perc_identity 80 ' + \
            '-outfmt 5'
        print('blastn CMD:', cmdLine)
        os.system(cmdLine)

    else:
        msg="""! Error: 'blastn' is not exist, please install it first."""
        raise Exception(msg)


def blastdb_nucl(ifa=None):
    if is_software_exist(software='makeblastdb') is True:
        opath = os.path.dirname(ifa)
        oname = '.'.join(os.path.basename(ifa).split('.')[:-1]) + '_blastnDB'
        odir = os.path.join(opath, oname)
        ofile = os.path.join(odir, oname)

        if os.path.isdir(odir) is False:
            os.mkdir(odir)
        else:
            msg = """! Error: {} was existed."""
            raise Exception(msg)

        cmdLine = \
            'makeblastdb ' + \
            '-in {} '.format(ifa) + \
            '-input_type fasta ' + \
            '-dbtype nucl ' + \
            '-out {}'.format(ofile)
        os.system(cmdLine)

    else:
        msg="""! Error: 'makeblastdb' is not exist, please install it first."""
        raise Exception(msg)


def is_software_exist(software=None):
    if os.system('{software} -h'.format(software=software)) == 0:
        return True
    else:
        return False


if __name__ == '__main__':
    main()
