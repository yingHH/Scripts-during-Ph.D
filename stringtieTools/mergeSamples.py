# -*- coding: utf-8 -*-
"""
Created on 2018-12-21 16:26:30
Last Modified on 2018-12-21 16:26:30

Merge all samples expression data generated by read_files.read_transcripts_exp().

@Author: Ying Huang
"""
import os
import pandas as pd
import datatable as dt
import fire
# self packages
from stringtieTools.read_files import read_transcripts_exp, read_genes_exp
from stringtieTools.gfftools import ncbi_add_generalID_to_maskID


def merge_tx_exp(idir, exp_type='tpm', ofile=None, if_convert_id=False, igff=None):
    """Merge transcripts expression data of all samples.
    Expression data generated by read_files.read_transcripts_exp().
    
    idir: <Path> directory path to samples.
    igff: <Path> path to NCBI RefSeq file in GFF foramt.

    Opation parameters:
    exp_type: <str> choose a calculate type for expression. 
        Must be one of 'cov', 'fpkm', 'tpm'. Default is 'tpm'.
    ofile: <Path> output file path, default no output file.
    if_convert_id: <bool> if convert id base on 'GFF3' file.
        Default is True.
    igff: <Path> path to NCBI RefSeq file in GFF foramt.
        if 'if_convert_id' is True, this parameter is required."""

    EXP_TYPE_DICT = {
        'COV': 'COV',
        'FPKM': 'FPKM',
        'TPM': 'TPM',
    }

    assert isinstance(exp_type, str)
    exp_type = EXP_TYPE_DICT[exp_type.upper()]
    print('<Get expression in "{}" method.>'.format(exp_type))

    exp_df = pd.DataFrame()
    for f in sorted(os.listdir(idir)):
        if f.endswith('.abund.gtf'):
            print('<Reading :>', f)
            ifile = os.path.join(idir, f)
            tmp_df = read_transcripts_exp(ifile)[
                ['gene_id',	'transcript_id', 
                'ref_gene_name', exp_type]
            ]
            # rename expression columns
            sp_name = f.strip('.abund.gtf')
            tmp_df.rename({exp_type: sp_name}, axis=1, inplace=True)

            if exp_df.empty:
                exp_df = tmp_df
            else:
                exp_df = pd.merge(
                    exp_df, tmp_df, 
                    on=['gene_id', 'transcript_id', 'ref_gene_name'],
                    how='outer',
                )

    # Convert NaN to zero
    exp_df.fillna('0', inplace=True)

    if if_convert_id is True:
        exp_df = ncbi_add_generalID_to_maskID(
            'tx' ,exp_df, 'transcript_id', igff
        )

    if ofile is not None:
        exp_df.to_csv(ofile, index=False)

    return exp_df


def merge_gene_exp(idir, exp_type='tpm', ofile=None, if_convert_id=False, igff=None):
    """Merge transcripts expression data of all samples.
    Expression data generated by read_files.read_transcripts_exp().
    
    idir: <Path> directory path to samples.

    Opation parameters:
    exp_type: <str> choose a calculate type for expression. 
        Must be one of 'cov', 'fpkm', 'tpm'. Default is 'tpm'.
    ofile: <Path> output file path, default no output file.
    if_convert_id: <bool> if convert id base on 'GFF3' file.
        Default is True.
    igff: <Path> path to NCBI RefSeq file in GFF foramt.
        if 'if_convert_id' is True, this parameter is required."""

    EXP_TYPE_DICT = {
        'COV': 'Coverage',
        'FPKM': 'FPKM',
        'TPM': 'TPM',
    }

    assert isinstance(exp_type, str)
    exp_type = EXP_TYPE_DICT[exp_type.upper()]
    print('<Get expression in "{}" method.>'.format(exp_type))

    exp_df = pd.DataFrame()
    for f in sorted(os.listdir(idir)):
        if f.endswith('.abund.txt'):
            print('<Reading :>', f)
            ifile = os.path.join(idir, f)
            tmp_df = read_genes_exp(ifile)[
                ['Gene ID',	'Gene Name', exp_type]
            ]
            # rename expression columns
            sp_name = f.rstrip(r'.abund.txt')
            tmp_df.rename({exp_type: sp_name}, axis=1, inplace=True)

            if exp_df.empty:
                exp_df = tmp_df
            else:
                exp_df = pd.merge(
                    exp_df, tmp_df,
                    on=['Gene ID',	'Gene Name'],
                    how='outer',
                )

    # Convert NaN to zero
    exp_df.fillna('0', inplace=True)

    if if_convert_id is True:
        exp_df = ncbi_add_generalID_to_maskID(
            'gene', exp_df, 'Gene ID', igff
        )

    if ofile is not None:
        exp_df.to_csv(ofile, index=False)

    return exp_df


def merge_gene_exp_dt(idir, exp_type='tpm', ofile=None, if_convert_id=False, igff=None):
    """<For big data> Merge transcripts expression data of all samples.
    Expression data generated by read_files.read_transcripts_exp().
    
    idir: <Path> directory path to samples.

    Opation parameters:
    exp_type: <str> choose a calculate type for expression. 
        Must be one of 'cov', 'fpkm', 'tpm'. Default is 'tpm'.
    ofile: <Path> output file path, default no output file.
    if_convert_id: <bool> if convert id base on 'GFF3' file.
        Default is True.
    igff: <Path> path to NCBI RefSeq file in GFF foramt.
        if 'if_convert_id' is True, this parameter is required."""

    EXP_TYPE_DICT = {
        'COV': 'Coverage',
        'FPKM': 'FPKM',
        'TPM': 'TPM',
    }

    assert isinstance(exp_type, str)
    exp_type = EXP_TYPE_DICT[exp_type.upper()]
    print('<Get expression in "{}" method.>'.format(exp_type))

    # read in each gene expression file to datatable format
    exp_lst = list()
    for f in sorted(os.listdir(idir)):
        if f.endswith('.abund.txt'):
            print('<Reading :>', f)
            ifile = os.path.join(idir, f)
            tmp_df = read_genes_exp(ifile)[
                ['Gene ID', exp_type]
            ]
            # sort DataFrame and drop duplicates
            tmp_df = tmp_df.sort_values(
                ['Gene ID', exp_type]).drop_duplicates(['Gene ID'])
            # set gene id as index
            tmp_df.set_index(['Gene ID'], inplace=True)
            # rename expression columns
            sp_name = f.rstrip(r'.abund.txt')
            tmp_df.rename({exp_type: sp_name}, axis=1, inplace=True)

            # convert DataFrame to datatable
            exp_dt = dt.Frame(tmp_df[[sp_name]].T.reset_index())

            # add expression datatable to list
            exp_lst.append(exp_dt)

    # combine all expssion datatable together, and convert to pandas DataFrame
    all_exp_df = dt.rbind(exp_lst, force=True).to_pandas()
    # re-organised expression DataFrame, in which rows represent for genes, columns represent for samples
    all_exp_df = all_exp_df.set_index(
        all_exp_df.columns[0]).T.reset_index()
    all_exp_df.rename(
        {
            all_exp_df.columns[0]: 'Gene ID'
        },
        axis=1,
        inplace=True,
    )

    # Convert NaN to zero
    all_exp_df.fillna('0', inplace=True)

    if if_convert_id is True:
        exp_df = ncbi_add_generalID_to_maskID(
            'gene_name_ids', all_exp_df, 'Gene ID', igff
        )

    if ofile is not None:
        exp_df.to_csv(ofile, index=False)
        print('<Write :> {}'.format(ofile))

    return exp_df


if __name__ == '__main__':
    fire.Fire()
